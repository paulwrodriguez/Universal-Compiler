starting_symbol=<system goal>
<program>  -> #Start <block> 
<block> -> #StartBlock begin <stmt list> end #EndBlock
<stmt list> -> <statement> <statement tail>
<statement tail> -> <stmt list>
<statement tail> -> lampda
<statement> -> <ident> :=<expression> ; #Assign($1,$3)
<statement> -> read ( <id list> ) ;  
<statement> -> write (<expr list>) ; 
<statement> -> <block>
<statement> -> declare <var> Integer ; #DeclareInt($2)
<var> -> Id #ProcessVar($$)
<id list> -> <ident> #ReadId($1) <id tail>
<id tail> -> , <id list>
<id tail> -> lampda
<expr list> -> <expression> #WriteExpr($1) <expression tail>
<expression tail> -> , <expr list>
<expression tail> -> lampda
<expression> -> <primary> #Copy($1,$2) <primary tail> #Copy($2,$$) 
<primary tail> -> <add op> <expression> #GenInfix($$,$1,$2,$$)
<primary tail> -> lampda
<primary> -> (<expression>) #Copy($2,$$) 
<primary> -> <ident> #Copy($1,$$) 
<primary> -> IntLiteral #ProcessLiteral($$)
<add op> -> +  #ProcessOp($$) 
<add op> -> - #ProcessOp($$) 
<ident> -> Id #ProcessId($$)
<system goal> -> <program> $ #Finish